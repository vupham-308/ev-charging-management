import React, { useEffect, useState } from "react";
import "@fortawesome/fontawesome-free/css/all.min.css";
import "../admin/userADMIN.css";
import api from "../../config/axios";
import { message, Spin, Modal } from "antd";

const Users = () => {
    const [users, setUsers] = useState([]);
    const [stats, setStats] = useState(null);
    const [loading, setLoading] = useState(true);
    const [search, setSearch] = useState("");
    const [showModal, setShowModal] = useState(false);

    // üî¥ Modal x√°c nh·∫≠n x√≥a
    const [showConfirm, setShowConfirm] = useState(false);
    const [selectedUserId, setSelectedUserId] = useState(null);

    // üü¢ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
    const fetchUsers = async () => {
        setLoading(true);
        try {
            const res = await api.get("admin/users");
            setUsers(res.data);
        } catch (error) {
            console.error("‚ùå L·ªói t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
            message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
        } finally {
            setLoading(false);
        }
    };

    // üßÆ L·∫•y th·ªëng k√™
    const fetchStats = async () => {
        try {
            const res = await api.get("admin/users/user-stats");
            setStats(res.data);
        } catch (error) {
            console.error("‚ùå L·ªói t·∫£i th·ªëng k√™ ng∆∞·ªùi d√πng:", error);
        }
    };

    useEffect(() => {
        fetchUsers();
        fetchStats();
    }, []);

    // üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng
    const handleSearch = async (keyword) => {
        setSearch(keyword);
        if (!keyword.trim()) {
            fetchUsers();
            return;
        }

        try {
            const res = await api.get(`admin/users/search?name=${encodeURIComponent(keyword)}`);
            setUsers(res.data);
        } catch (error) {
            console.error("‚ùå L·ªói t√¨m ki·∫øm:", error);
            message.error("Kh√¥ng th·ªÉ t√¨m ki·∫øm ng∆∞·ªùi d√πng!");
        }
    };

    // üóë Nh·∫•n n√∫t X√≥a
    const handleDeleteClick = (id) => {
        console.log("üü† Nh·∫•n n√∫t x√≥a ID:", id);
        setSelectedUserId(id);
        setShowConfirm(true);
    };

    // ‚úÖ Th·ª±c hi·ªán x√≥a ng∆∞·ªùi d√πng
    const confirmDelete = async () => {
        console.log("üü¢ X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng ID:", selectedUserId);
        setLoading(true);
        try {
            const res = await api.delete(`admin/users/${selectedUserId}`);
            console.log("üì° K·∫øt qu·∫£ API:", res);

            if (res.status === 200 || res.status === 204) {
                message.success("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
                await fetchUsers();
                await fetchStats();
            } else {
                message.error("X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i!");
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error.response || error);
const errMsg = error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi x√≥a ng∆∞·ªùi d√πng!";
            message.error(errMsg);
        } finally {
            setShowConfirm(false);
            setSelectedUserId(null);
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="users-admin-page loading">
                <Spin size="large" tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
            </div>
        );
    }

    return (
        <div className="users-admin-page">
            {/* Header */}
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                <h1>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h1>
                <button className="btn-primary" onClick={() => setShowModal(true)}>
                    <i className="fa-solid fa-user-plus"></i> Th√™m ng∆∞·ªùi d√πng
                </button>
            </div>

            <br />

            {/* √î t√¨m ki·∫øm */}
            <input
                type="text"
                className="search-inputt"
                placeholder="üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n..."
                value={search}
                onChange={(e) => handleSearch(e.target.value)}
            />

            {/* Danh s√°ch ng∆∞·ªùi d√πng */}
            <div className="users-list">
                {users.length === 0 ? (
                    <div className="no-users">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.</div>
                ) : (
                    users.map((u) => (
                        <div key={u.id} className="user-card">
                            <div className="user-info">
                                <div>
                                    <div className="user-name">
                                        {u.fullName}{" "}
                                        <span
                                            className={`badge ${u.role === "USER"
                                                ? "driver"
                                                : u.role === "STAFF"
                                                    ? "manager"
                                                    : u.role === "ADMIN"
                                                        ? "admin"
                                                        : ""
                                                }`}
                                        >
                                            {u.role}
                                        </span>
                                    </div>
                                    <div className="user-email">{u.email}</div>
                                    <div className="user-meta">üìû {u.phone}</div>
                                </div>
                            </div>

                            <div className="user-actions">
                                <button className="btn-icon edit">
<i className="fa-solid fa-pen"></i> S·ª≠a
                                </button>
                                <button
                                    className="btn-icon delete"
                                    onClick={() => handleDeleteClick(u.id)}
                                >
                                    <i className="fa-solid fa-trash"></i> X√≥a
                                </button>
                            </div>
                        </div>
                    ))
                )}
            </div>

          {/* Popup th√™m ng∆∞·ªùi d√πng */}
            {showModal && (
                <div className="modal-overlay">
                    <div className="modal">
                        <div className="modal-header">
                            <h4>
                                <i className="fa-solid fa-user-plus"></i> T·∫°o t√†i kho·∫£n m·ªõi
                            </h4>
                            <button className="close-btn" onClick={() => setShowModal(false)}>
                                <i className="fa-solid fa-xmark"></i>
                            </button>
                        </div>
                        <p className="modal-desc">T·∫°o t√†i kho·∫£n cho nh√¢n vi√™n ho·∫∑c t√†i x·∫ø m·ªõi</p>

                        <form
                            className="modal-form"
                            onSubmit={async (e) => {
                                e.preventDefault();
                                const form = e.target;
                                const newUser = {
                                    fullName: form.fullName.value.trim(),
                                    email: form.email.value.trim(),
                                    phone: form.phone.value.trim(),
                                    role: form.role.value,
                                    password: form.password.value,
                                    active: true,
                                    enabled: true,
                                };

                                if (!newUser.fullName || !newUser.email || !newUser.role || !newUser.password) {
                                    message.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
                                    return;
                                }

                                try {
                                    setLoading(true);
                                    const res = await api.post("admin/users/create-user", newUser);
                                    if (res.status === 200 || res.status === 201) {
                                        message.success("T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng!");
                                        form.reset();
                                        setShowModal(false);
                                        await fetchUsers();
                                        await fetchStats();
                                    } else {
                                        message.error("Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng!");
                                    }
                                } catch (error) {
                                    console.error("‚ùå L·ªói khi t·∫°o ng∆∞·ªùi d√πng:", error);
                                    const errMsg = error.response?.data?.message || "L·ªói khi t·∫°o ng∆∞·ªùi d√πng!";
                                    message.error(errMsg);
                                } finally {
                                    setLoading(false);
}
                            }}
                        >
                            <label>
                                H·ªç v√† t√™n <span>*</span>
                            </label>
                            <input type="text" name="fullName" placeholder="Nguy·ªÖn VƒÉn A" />

                            <label>
                                Email <span>*</span>
                            </label>
                            <input type="email" name="email" placeholder="nguyenvana@email.com" />

                            <label>S·ªë ƒëi·ªán tho·∫°i</label>
                            <input type="tel" name="phone" placeholder="+84-123-456789" />

                            <label>
                                Vai tr√≤ <span>*</span>
                            </label>
                            <select name="role" defaultValue="">
                                <option value="" disabled>
                                    Ch·ªçn vai tr√≤
                                </option>
                                <option value="USER">T√†i x·∫ø</option>
                                <option value="STAFF">Qu·∫£n l√Ω</option>
                            </select>

                            <label>
                                M·∫≠t kh·∫©u <span>*</span>
                            </label>
                            <div className="password-field">
                                <input type="password" name="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
                            </div>

                            <p className="note">
                                <strong>L∆∞u √Ω:</strong> M·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã sau khi t·∫°o t√†i kho·∫£n th√†nh c√¥ng.
                                H√£y ghi l·∫°i v√† chuy·ªÉn cho ng∆∞·ªùi d√πng.
                            </p>

                            <div className="modal-actions">
                                <button type="submit" className="btn primary">
                                    T·∫°o t√†i kho·∫£n
                                </button>
                                <button
                                    type="button"
                                    className="btn secondary"
                                    onClick={() => setShowModal(false)}
                                >
                                    H·ªßy
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* üî• Modal x√°c nh·∫≠n x√≥a */}
            <Modal
                visible={showConfirm}
                title="X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng"
                onOk={confirmDelete}
                onCancel={() => setShowConfirm(false)}
                okText="X√≥a"
                cancelText="H·ªßy"
                okButtonProps={{ danger: true }}
            >
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?</p>
            </Modal>
        </div>
    );
};

export default Users;
