import React, { useEffect, useState } from "react";
import "@fortawesome/fontawesome-free/css/all.min.css";
<<<<<<< HEAD
import "./userADMIN.css";
=======
import "../admin/userADMIN.css";
>>>>>>> e5ea23daca85bb868f7845ff164d33be427eecc0
import api from "../../config/axios";
import { message, Spin, Modal } from "antd";

const Users = () => {
    const [users, setUsers] = useState([]);
    const [stats, setStats] = useState(null);
    const [loading, setLoading] = useState(true);
    const [search, setSearch] = useState("");
    const [showModal, setShowModal] = useState(false);

    // üü¢ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
    const fetchUsers = async () => {
        setLoading(true);
        try {
            const res = await api.get("admin/users");
            setUsers(res.data);
        } catch (error) {
            console.error(error);
            message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
        } finally {
            setLoading(false);
        }
    };

    // üßÆ L·∫•y th·ªëng k√™
    const fetchStats = async () => {
        try {
            const res = await api.get("admin/users/user-stats");
            setStats(res.data);
        } catch (error) {
            console.error(error);
        }
    };

    useEffect(() => {
        fetchUsers();
        fetchStats();
    }, []);

    // üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng
    const handleSearch = async (keyword) => {
        setSearch(keyword);
        if (!keyword.trim()) {
            fetchUsers();
            return;
        }

        try {
            const res = await api.get(`admin/users/search?name=${encodeURIComponent(keyword)}`);
            setUsers(res.data);
        } catch (error) {
            console.error(error);
            message.error("Kh√¥ng th·ªÉ t√¨m ki·∫øm ng∆∞·ªùi d√πng!");
        }
    };

    // üóë X√≥a ng∆∞·ªùi d√πng
    const handleDelete = async (id) => {
        Modal.confirm({
            title: "X√°c nh·∫≠n x√≥a",
            content: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?",
            okText: "X√≥a",
            cancelText: "H·ªßy",
            okButtonProps: { danger: true },
            onOk: async () => {
                try {
                    await api.delete(`admin/users/${id}`);
                    message.success("ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
                    fetchUsers();
                    fetchStats();
                } catch (error) {
                    console.error(error);
                    message.error("X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i!");
                }
            },
        });
    };

    if (loading) {
        return (
            <div className="users-admin-page loading">
                <Spin size="large" tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
            </div>
        );
    }

    return (
        <div className="users-admin-page">
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                <h1>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h1>
                <button className="btn-primary" onClick={() => setShowModal(true)}>
<i className="fa-solid fa-user-plus"></i> Th√™m ng∆∞·ªùi d√πng
                </button>
            </div>

            <br></br>
            {/* √î t√¨m ki·∫øm */}
            <input
                type="text"
                className="search-inputt"
                placeholder="üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n..."
                value={search}
                onChange={(e) => handleSearch(e.target.value)}
            />

            {/* Danh s√°ch ng∆∞·ªùi d√πng */}
            <div className="users-list">
                {users.map((u) => (
                    <div key={u.id} className="user-card">
                        <div className="user-info">
                            <div>
                                <div className="user-name">
                                    {u.fullName}{" "}
                                    <span
                                        className={`badge ${u.role === "USER"
                                            ? "driver"
                                            : u.role === "STAFF"
                                                ? "manager"
                                                : u.role === "ADMIN"
                                                    ? "admin"
                                                    : ""
                                            }`}
                                    >
                                        {u.role}
                                    </span>
                                </div>
                                <div className="user-email">{u.email}</div>
                                <div className="user-meta">üìû {u.phone}</div>
                            </div>
                        </div>
                        <div className="user-actions">
                            <button className="btn-icon edit">
                                <i className="fa-solid fa-pen"></i> S·ª≠a
                            </button>
                            <button className="btn-icon delete" onClick={() => handleDelete(u.id)}>
                                <i className="fa-solid fa-trash"></i> X√≥a
                            </button>
                        </div>
                    </div>
                ))}
            </div>

            {/* Popup th√™m ng∆∞·ªùi d√πng (ch∆∞a k·∫øt n·ªëi API) */}
            {showModal && (
                <div className="modal-overlay">
                    <div className="modal">
                        <div className="modal-header">
                            <h4><i className="fa-solid fa-user-plus"></i> T·∫°o t√†i kho·∫£n m·ªõi</h4>
                            <button className="close-btn" onClick={() => setShowModal(false)}>
                                <i className="fa-solid fa-xmark"></i>
                            </button>
                        </div>
<p className="modal-desc">T·∫°o t√†i kho·∫£n cho nh√¢n vi√™n ho·∫∑c t√†i x·∫ø m·ªõi</p>

                        <form className="modal-form">
                            <label>H·ªç v√† t√™n <span>*</span></label>
                            <input type="text" placeholder="Nguy·ªÖn VƒÉn A" />

                            <label>Email <span>*</span></label>
                            <input type="email" placeholder="nguyenvana@email.com" />

                            <label>S·ªë ƒëi·ªán tho·∫°i</label>
                            <input type="tel" placeholder="+84-123-456789" />

                            <label>Vai tr√≤ <span>*</span></label>
                            <select defaultValue="">
                                <option value="" disabled>Ch·ªçn vai tr√≤</option>
                                <option value="USER">T√†i x·∫ø</option>
                                <option value="STAFF">Nh√¢n vi√™n</option>
                                <option value="ADMIN">Qu·∫£n tr·ªã vi√™n</option>
                            </select>

                            <label>M·∫≠t kh·∫©u <span>*</span></label>
                            <div className="password-field">
                                <input type="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
                                <i className="fa-solid fa-eye"></i>
                            </div>

                            <p className="note">
                                <strong>L∆∞u √Ω:</strong> M·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã sau khi t·∫°o t√†i kho·∫£n th√†nh c√¥ng.
                                H√£y ghi l·∫°i v√† chuy·ªÉn cho ng∆∞·ªùi d√πng.
                            </p>

                            <div className="modal-actions">
                                <button type="submit" className="btn primary">T·∫°o t√†i kho·∫£n</button>
                                <button type="button" className="btn secondary" onClick={() => setShowModal(false)}>H·ªßy</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Users;