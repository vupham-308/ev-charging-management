import { useEffect, useState } from "react";
import { Card, Button, Tag, Divider, Spin, message } from "antd";
import { useLocation, useNavigate } from "react-router-dom";
import { CheckCircleOutlined, EnvironmentOutlined } from "@ant-design/icons";
import api from "../../config/axios";

const ManageConfirmBill = () => {
  const navigate = useNavigate();
  const { state } = useLocation();
  const [chargeData, setChargeData] = useState(null);
  const [loading, setLoading] = useState(true);

  // N·∫øu ng∆∞·ªùi d√πng v√†o tr·ª±c ti·∫øp m√† kh√¥ng c√≥ state t·ª´ trang tr∆∞·ªõc
  if (!state) {
    return (
      <div style={{ textAlign: "center", marginTop: 50 }}>
        <p>‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu phi√™n s·∫°c.</p>
        <Button type="primary" onClick={() => navigate("/driver/start")}>
          Quay l·∫°i ch·ªçn tr·∫°m
        </Button>
      </div>
    );
  }

  const { selectedCar, selectedCharger, targetBattery, paymentMethod } = state;

  // üîê L·∫•y token t·ª´ localStorage
  const token = localStorage.getItem("token");

  // G·ª≠i API khi v√†o trang
  useEffect(() => {
    const fetchCharge = async () => {
      try {
        const payload = {
          carId: selectedCar.id,
          pointId: selectedCharger.id,
          goalBattery: targetBattery,
          paymentMethod,
        };
        console.log("üì¶ Payload g·ª≠i l√™n:", payload);
        const response = await api.post("/charge", payload, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        setChargeData(response.data);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫°o phi√™n s·∫°c:", err);
        message.error("Kh√¥ng th·ªÉ t·∫°o phi√™n s·∫°c. Vui l√≤ng th·ª≠ l·∫°i!");
      } finally {
        setLoading(false);
      }
    };

    fetchCharge();
  }, [selectedCar, selectedCharger, targetBattery, paymentMethod, token]);

  const handleConfirm = async () => {
    try {
      if (!selectedCar?.id || !selectedCharger?.id) {
        return message.warning(
          "‚ö†Ô∏è Vui l√≤ng ch·ªçn xe v√† tr·ª• s·∫°c tr∆∞·ªõc khi x√°c nh·∫≠n!"
        );
      }

      const payload = {
        carId: Number(selectedCar.id),
        pointId: Number(selectedCharger.id),
        goalBattery: Number(targetBattery),
        paymentMethod: paymentMethod || "CASH",
      };

      console.log("üöó Payload g·ª≠i ƒëi:", payload);

      const res = await api.post("/charge", payload);
      console.log("üì¶ Response t·ª´ server:", res.data);
      navigate("/driver/chargingSession", {
        state: {
          id: res.data.id,
          carName: selectedCar.brand,
          currentBattery: selectedCar.initBattery,
          targetBattery,
          stationName: station.name,
          chargerName: selectedCharger.name,
          chargerCost: selectedCharger.chargerCost?.cost,
          paymentMethod,
          status: "ƒêang s·∫°c",
        },
      });
    } catch (error) {
      message.error("‚ùå L·ªói khi b·∫Øt ƒë·∫ßu s·∫°c!");
      console.error("Chi ti·∫øt l·ªói:", error.response?.data || error);
    }
  };

  if (loading) {
    return (
      <div style={{ textAlign: "center", marginTop: 80 }}>
        <Spin size="large" />
        <p>ƒêang t·∫£i d·ªØ li·ªáu phi√™n s·∫°c...</p>
      </div>
    );
  }

  if (!chargeData) {
    return (
      <div style={{ textAlign: "center", marginTop: 50 }}>
        <p>‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API.</p>
        <Button onClick={() => navigate(-1)}>Quay l·∫°i</Button>
      </div>
    );
  }

  // üß© Gi·∫£i n√©n d·ªØ li·ªáu t·ª´ API
  const {
    point,
    carName,
    paymentMethod: method,
    minute,
    fee,
    initBattery,
    goalBattery,
  } = chargeData;

  const station = point.station;
  const chargerCost = point.chargerCost;

  return (
    <div style={{ maxWidth: 1000, margin: "40px auto" }}>
      <h2 style={{ fontWeight: 600, marginBottom: 8 }}>X√°c nh·∫≠n th√¥ng tin</h2>
      <p style={{ color: "#666", marginBottom: 20 }}>
        Ki·ªÉm tra v√† x√°c nh·∫≠n ƒë·ªÉ b·∫Øt ƒë·∫ßu s·∫°c
      </p>

      <div style={{ display: "flex", gap: 24 }}>
        {/* --- C·ªôt tr√°i: T√≥m t·∫Øt phi√™n s·∫°c --- */}
        <Card
          title={
            <>
              <CheckCircleOutlined style={{ color: "#52c41a" }} /> T√≥m t·∫Øt phi√™n
              s·∫°c
            </>
          }
          style={{ flex: 1, borderRadius: 12 }}
        >
          <p>
            <strong>Tr·∫°m s·∫°c:</strong> {station.name}
          </p>
          <p>
            <strong>Tr·ª• s·∫°c:</strong> {point.name} ‚Ä¢ {point.capacity}kW
          </p>
          <p>
            <strong>Xe:</strong> {carName}
          </p>
          <p>
            <strong>Pin hi·ªán t·∫°i:</strong> {initBattery}%
          </p>
          <p>
            <strong>M·ª•c ti√™u pin:</strong> {goalBattery}%
          </p>
          <p>
            <strong>Ph∆∞∆°ng th·ª©c:</strong>{" "}
            {method === "BALANCE" ? "S·ªë d∆∞ t√†i kho·∫£n" : "Ti·ªÅn m·∫∑t"}
          </p>

          <div
            style={{
              background: "#f9fbff",
              padding: "12px 16px",
              borderRadius: 8,
              marginTop: 12,
            }}
          >
            <p>
              <strong>‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh:</strong>{" "}
              <span style={{ color: "#1890ff" }}>{minute} ph√∫t</span>
            </p>
            <p>
              <strong>üí∞ Chi ph√≠ ∆∞·ªõc t√≠nh:</strong>{" "}
              <span style={{ color: "#1890ff" }}>
                {fee.toLocaleString("vi-VN")}ƒë
              </span>
            </p>
          </div>

          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              marginTop: 20,
            }}
          >
            <Button onClick={() => navigate(-1)}>Quay l·∫°i</Button>
            <Button type="primary" onClick={handleConfirm}>
              X√°c nh·∫≠n
            </Button>
          </div>
        </Card>

        {/* --- C·ªôt ph·∫£i: Chi ti·∫øt tr·∫°m --- */}
        <Card
          title={
            <>
              <EnvironmentOutlined style={{ color: "#1890ff" }} /> Chi ti·∫øt tr·∫°m
              s·∫°c
            </>
          }
          style={{ flex: 1, borderRadius: 12 }}
        >
          <h3 style={{ color: "#1890ff" }}>{station.name}</h3>
          <p style={{ color: "#555" }}>{station.address}</p>

          <Divider />

          <div style={{ display: "flex", justifyContent: "space-between" }}>
            <p>
              <strong>üí° Gi√° ƒëi·ªán:</strong>{" "}
              {chargerCost.cost.toLocaleString("vi-VN")}ƒë/kWh
            </p>
            <p>
              <strong>üîå Lo·∫°i tr·ª•:</strong>{" "}
              <Tag color="blue">{chargerCost.portType}</Tag>
            </p>
          </div>
          <p>
            <strong>‚öôÔ∏è C√¥ng su·∫•t:</strong> {point.capacity}kW
          </p>
          <Tag color="green">‚ö° S·∫°c nhanh</Tag>

          <Divider />

          <p style={{ color: "#888", fontSize: 13 }}>
            ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong>
            <br />‚Ä¢ Th·ªùi gian v√† chi ph√≠ l√† ∆∞·ªõc t√≠nh
            <br />‚Ä¢ Vui l√≤ng ƒë·∫£m b·∫£o xe ƒë√£ k·∫øt n·ªëi v·ªõi tr·ª• s·∫°c
          </p>
        </Card>
      </div>
    </div>
  );
};

export default ManageConfirmBill;
